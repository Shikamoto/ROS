// Generated by gencpp from file delivery_robot_serial_handler/Vel.msg
// DO NOT EDIT!


#ifndef DELIVERY_ROBOT_SERIAL_HANDLER_MESSAGE_VEL_H
#define DELIVERY_ROBOT_SERIAL_HANDLER_MESSAGE_VEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delivery_robot_serial_handler
{
template <class ContainerAllocator>
struct Vel_
{
  typedef Vel_<ContainerAllocator> Type;

  Vel_()
    : V1(0)
    , V2(0)  {
    }
  Vel_(const ContainerAllocator& _alloc)
    : V1(0)
    , V2(0)  {
  (void)_alloc;
    }



   typedef int32_t _V1_type;
  _V1_type V1;

   typedef int32_t _V2_type;
  _V2_type V2;





  typedef boost::shared_ptr< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> const> ConstPtr;

}; // struct Vel_

typedef ::delivery_robot_serial_handler::Vel_<std::allocator<void> > Vel;

typedef boost::shared_ptr< ::delivery_robot_serial_handler::Vel > VelPtr;
typedef boost::shared_ptr< ::delivery_robot_serial_handler::Vel const> VelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delivery_robot_serial_handler::Vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delivery_robot_serial_handler::Vel_<ContainerAllocator1> & lhs, const ::delivery_robot_serial_handler::Vel_<ContainerAllocator2> & rhs)
{
  return lhs.V1 == rhs.V1 &&
    lhs.V2 == rhs.V2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delivery_robot_serial_handler::Vel_<ContainerAllocator1> & lhs, const ::delivery_robot_serial_handler::Vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delivery_robot_serial_handler

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dae73f832167df9adfb7b2bb4355fc17";
  }

  static const char* value(const ::delivery_robot_serial_handler::Vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdae73f832167df9aULL;
  static const uint64_t static_value2 = 0xdfb7b2bb4355fc17ULL;
};

template<class ContainerAllocator>
struct DataType< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delivery_robot_serial_handler/Vel";
  }

  static const char* value(const ::delivery_robot_serial_handler::Vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 V1\n"
"int32 V2\n"
;
  }

  static const char* value(const ::delivery_robot_serial_handler::Vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.V1);
      stream.next(m.V2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delivery_robot_serial_handler::Vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delivery_robot_serial_handler::Vel_<ContainerAllocator>& v)
  {
    s << indent << "V1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.V1);
    s << indent << "V2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.V2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELIVERY_ROBOT_SERIAL_HANDLER_MESSAGE_VEL_H
